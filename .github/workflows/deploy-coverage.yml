# .github/workflows/ci.yml

name: IcapFlow CI & Quality Checks

on:
  push:
    branches: main

jobs:
  test:
    name: PHP ${{ matrix.php-version }} Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.3']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: sockets
          coverage: pcov

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Audit Composer dependencies for vulnerabilities
        run: composer audit

      - name: Check code style (PSR-12)
        run: composer cs-check

      - name: Run static analysis
        run: composer stan

      # SCHRITT 1: Tests ausführen UND dabei den Report generieren
      # Der Befehl `composer test -- --coverage` generiert automatisch den HTML-Report,
      # da wir das in der phpunit.xml.dist so konfiguriert haben.
      - name: Run tests and generate coverage report
        run: composer test -- --coverage

      # SCHRITT 2: Den generierten HTML-Report als Artefakt hochladen
      # Dieser Schritt macht den Report nach dem Lauf verfügbar.
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          # GITHUB_TOKEN wird automatisch von GitHub bereitgestellt und hat die nötigen RechteAdd commentMore actions
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Der Ordner, der den Inhalt der Webseite enthält (unser Report)
          publish_dir: ./build/coverage-html
          # Der Ziel-Branch, auf den der Report gepusht werden soll
          publish_branch: gh-pages
          # Stellt sicher, dass die Historie dieses Branches sauber bleibt
          force_orphan: true