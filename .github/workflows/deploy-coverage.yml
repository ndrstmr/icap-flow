# .github/workflows/deploy-coverage.yml

name: Deploy Coverage Report to GitHub Pages

# Trigger: Führe diesen Workflow nur aus, wenn auf den main-Branch gepusht wird.
on:
  push:
    branches:
      - main

# Berechtigungen: Gib dem Workflow die Erlaubnis, in das Repository zu schreiben (um den gh-pages Branch zu erstellen/aktualisieren).
permissions:
  contents: write

jobs:
  build-and-deploy:
    name: Build and Deploy Coverage Report
    runs-on: ubuntu-latest

    steps:
      # 1. Code auschecken
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. PHP-Umgebung aufsetzen mit Xdebug für Coverage
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: sockets
          coverage: xdebug

      # 3. Composer-Abhängigkeiten installieren
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-dev

      # 4. Tests ausführen und den HTML-Report generieren
      - name: Run tests and generate coverage report
        run: composer test -- --coverage

      # 5. Den generierten Report auf den gh-pages Branch deployen
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          # GITHUB_TOKEN wird automatisch von GitHub bereitgestellt und hat die nötigen Rechte
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Der Ordner, der den Inhalt der Webseite enthält (unser Report)
          publish_dir: ./build/coverage-html
          # Der Ziel-Branch, auf den der Report gepusht werden soll
          publish_branch: gh-pages
          # Stellt sicher, dass die Historie dieses Branches sauber bleibt
          force_orphan: true